# définit le nom du workflow
name: Angular Front CI/CD

# liste les évènements déclenchant l'exécution du workflow
on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

# le job s'exécutera dans un container ayant pour OS la dernière version d'Ubuntu
jobs:
  test-n-build:
    runs-on: ubuntu-latest

    # définit une matrix de stratégies menant à l'exécution du job avec
    # les version de node renseignées
    strategy:
      matrix:
        node-version: [18.x, 20.x]
      # permet de faire en sorte que tous les jobs de la matrice s'exécutent
      # même si l'un d'eux échoue
      fail-fast: false

    # définit le répertoire actif par défault
    defaults:
      run:
        working-directory: "./front"

    steps:
      # ETAPE 1 : CHECKOUT (utilisation de l'action actions/checkout@v4)
      # i.e : cloning du repository, fetching du dernier commit, authentification git, ...
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ github.event_name == 'pull_request' && '0' || '1' }}

      # ETAPE 2 : INSTALLATION DE NODE JS
      # installe node.js sur le container actif
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          # les dépendances présentes dans package-lock.json devront être mises en cache
          cache: "npm"
          cache-dependency-path: "./front/package-lock.json"

      # ETAPE 3 : INSTALLATION DES DEPENDANCES DU PROJET
      - name: Install dependencies
        run: npm ci

      # ETAPE 4 : EXECUTION DES TESTS & GENERATION DU COVERAGE
      - name: Run Angular tests & generate coverage
        run: |
          npm run test:ci
          npm run coverage:ci

      # ETAPE 6 : GENERATION & UPLOAD D’UN ARTEFACT CONTENANT CES DONNEES
      - name: Upload Coverage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.node-version }}
          path: ./front/coverage/bobapp/lcov-report

      # ETAPE 7 : BUILD DU FRONTEND ANGULAR DE L’APPLICATION
      - name: Build Angular Frontend
        run: npm run build --prod

      # ETAPE 8 : ANALYSE DE LA QUALITE DU CODE VIA SONARCLOUD
      - name: SonarCloud Frontend Scan
        # étape uniquement exécutée pour le container contenant node 20
        if: ${{ matrix.node-version == '20.x' }}
        uses: sonarsource/sonarcloud-github-action@master
        env:
          # token permettant au workflow de s'authentifier auprès de sonarcloud
          # généré via l'interface de sonarcloud & inséré en tant que secret
          # dans les settings du repository
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_FRONT }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        with:
          projectBaseDir: ./front
          args: >
            -Dsonar.projectKey=ask0ldd_bobapp-front-final
            -Dsonar.organization=ask0ldd
            -Dsonar.sources=src
            -Dsonar.tests=src
            -Dsonar.inclusions=**/*.ts,**/*.scss,**/*.html
            -Dsonar.test.inclusions=**/*.spec.ts
            -Dsonar.javascript.lcov.reportPaths=coverage/bobapp/lcov.info
            -Dsonar.coverage.exclusions=.angular/**,node_modules/**,coverage/**,src/environments/**,**/*.spec.ts,**/*.conf.js,src/test.ts,src/main.ts
            -Dsonar.exclusions=.angular/**,node_modules/**,coverage/**

      #- name: List workspace contents
      #  run: ls -R ${{ github.workspace }}

      # ETAPE 9 : BUILD & UPLOAD DE L’IMAGE DOCKER VERS DOCKERHUB
      - name: Docker Image Build & Push to DockerHub
        if: ${{ matrix.node-version == '20.x' && github.event_name == 'push' && github.ref == 'refs/heads/main'}}
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
        run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_TOKEN
          docker build -t $DOCKER_USERNAME/bobappfront:latest .
          docker push $DOCKER_USERNAME/bobappfront:latest

      # ETAPE 10 : ATTENDS QUE DEUX COMMENTAIRES AIENT ETE ASSOCIES A LA PULL REQUEST
      - name: Wait for two comments
        if: ${{ github.event_name == 'pull_request' && matrix.node-version == '20.x' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          while true
          do
            comments=$(gh api repos/${{ github.repository }}/issues/$PR_NUMBER/comments | jq length)
            if [ $comments -ge 2 ]; then
              break
            fi
            sleep 10
          done

      # ETAPE 11 : RECUPERATION DE CES COMMENTAIRES CONTENANT LES STATS SONARQUBE
      - name: Fetch PR comments
        if: ${{ github.event_name == 'pull_request' && matrix.node-version == '20.x' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          comments=$(gh api repos/${{ github.repository }}/issues/$PR_NUMBER/comments --jq '.[].body')
          echo "$comments" > $GITHUB_WORKSPACE/sonar-reports.md

      # ETAPE 12 : UPLOAD DE CES STATS SOUS LA FORME D'UN ARTEFACT
      - name: Upload comments as artifact
        if: ${{ github.event_name == 'pull_request' && matrix.node-version == '20.x' }}
        uses: actions/upload-artifact@v4
        with:
          name: sonar-reports
          path: ${{ github.workspace }}/sonar-reports.md
