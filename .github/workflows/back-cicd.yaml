name: Spring Back CI/CD

# liste les évènements déclenchant l'exécution du workflow
on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

# le job s'exécutera dans un container ayant pour OS la dernière version d'Ubuntu
jobs:
  test-n-build:
    runs-on: ubuntu-latest

    # définit le répertoire actif par défault
    defaults:
      run:
        working-directory: "./back"

    steps:
      # ETAPE 1 : CHECKOUT (utilisation de l'action actions/checkout@v4)
      # i.e : cloning du repository, fetching du dernier commit, authentification git, ...
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ github.event_name == 'pull_request' && '0' || '1' }}

      # ETAPE 2 : INSTALLE & CONFIGURE ADOPTOPENJDK v17
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "adopt"

      # ETAPE 3 : BUILD LE BACKEND DE L’APPLICATION AVEC MAVEN
      # 1- vide le repertoire /target de son contenu
      # 2- compile le code java du projet
      # 3- converti ce code en un jar, destination : /target
      # 4- copie le package Jar ou War dans le repository Maven local (~/.m2/repository)
      - name: Build with Maven
        # -DskipTests : build le projet en renonçant à l'exécution des tests
        run: mvn clean install -DskipTests

      # ETAPE 4 : EXECUTE LES TESTS & GENERE LE COVERAGE
      # inutile d'exécuter mvn jacoco:report car le pom xml contient la génération du coverage
      # en tant que goal
      - name: Run Tests & Generate Jacoco Coverage
        run: mvn clean test

      # ETAPE 5 : GENERATION & UPLOAD D’UN ARTEFACT CONTENANT CES DONNEES
      - name: Upload Coverage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-coverage
          path: ./back/target/site/jacoco

      # ETAPE 6 : ANALYSE DE LA QUALITE DU CODE VIA SONARCLOUD
      - name: SonarCloud Backend Scan
        env:
          # token permettant au workflow de s'authentifier auprès de sonarcloud
          # généré via l'interface de sonarcloud & inséré en tant que secret
          # dans les settings du repository
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_BACK }}
        run: |
          mvn verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=ask0ldd_bobapp-back-final \
            -Dsonar.organization=ask0ldd \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.sources=src/main/java \
            -Dsonar.tests=src/test/java \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
            -Dsonar.coverage.exclusions=target/**,src/test/** \
            -Dsonar.exclusions=target/**

      # ETAPE 7 : BUILD & UPLOAD DE L’IMAGE DOCKER VERS DOCKERHUB
      - name: Docker Image Build & Push to DockerHub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
        run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_TOKEN
          docker build -t $DOCKER_USERNAME/bobappback:latest .
          docker push $DOCKER_USERNAME/bobappback:latest

      # ETAPE 8 : ATTENDS QUE DEUX COMMENTAIRES AIENT ETE ASSOCIES A LA PULL REQUEST
      - name: Wait for two comments
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          while true
          do
            comments=$(gh api repos/${{ github.repository }}/issues/$PR_NUMBER/comments | jq length)
            if [ $comments -ge 2 ]; then
              break
            fi
            sleep 10
          done

      # ETAPE 9 : RECUPERATION DE CES COMMENTAIRES CONTENANT LES STATS SONARQUBE
      - name: Fetch PR comments
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          comments=$(gh api repos/${{ github.repository }}/issues/$PR_NUMBER/comments --jq '.[].body')
          echo "$comments" > $GITHUB_WORKSPACE/sonar-reports.md

      # ETAPE 10 : UPLOAD DE CES STATS SOUS LA FORME D'UN ARTEFACT
      - name: Upload comments as artifact
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: sonar-reports
          path: ${{ github.workspace }}/sonar-reports.md
